<html>
<head>
	<title>
	Gauss Elimination Method
	</title>
	<style>
		table {
			border: 1px solid black;
			padding: 2px;
		}
		th {
			
		}
		td {
			text-align: center;
		}
		th {
			background-color: #CCCCCC;
			width: 75px;
		}
		.matrixInput {
			width: 75px;
		}
		p {
			margin: 16px 0px 0px 0px;
		}
	</style>
</head>

<body>
	<div id="input">
		<form name = "matrix size" action = "" method = "get">
		Matrix size:
		<br />
		<input type = "text" name = "inputbox" value = "">
		<br />
		<input type = "button" name = "button" value = "Click" onClick= "GetMatrixSize (this.form)">
		</form>
	</div>
	<div id="myDiv">
		<p>
			
		</p>
		<!--//<input type="button" id="create" value="Click here" onclick="Javascript:AddTable (matrix.length)">--!>
	</div>
	
	<script type="text/javascript">
	
		//====== GetMatrixSize ========================
		function GetMatrixSize (form) {
			var MatrixSize = form.inputbox.value;
			Explain ("Matrix size: " + MatrixSize);
			AddInputTable (MatrixSize);
			Explain ("Gauss Elimination Method:")
			AddTable (matrix.length);
			TraverseMatrix ();
		}
	
		var myDiv = document.getElementById ("myDiv");
		
		var matrix = [[2,4,-4,0,2,1],
									[0,4,-3,0,6,0],
									[0,2,5,13,-3.5,0],
									[0,-2,-1,4,-0.5,-9],
									[1,5,0,1,-5,1],
									[1,0,2,0,-2,-2]];
		
		var usefulRows = matrix.length;
		var columns = matrix.length
		var currentCol = -1;
		
		//====== MAIN =================================
		
		//====== TraverseMatrix =======================
		function TraverseMatrix () {
			for (var col = 0; col < columns ; col ++) {
				currentCol ++;
				for (var row = col + 1; row < usefulRows; row ++) {
					DecideWhatToDo (row, col);
				}
				
				Normalize (col);
			}
		}
		
		//====== DecideWhatToDo =======================
		function DecideWhatToDo (row, col) {
			if (matrix[row][col] !== 0) {
				addendRow = col;
				PutZeroRowsAtTop (col, col);
				IfDiagonalCellIsZero (row, col);
				
				if (!IsRowZero (col) && matrix[row][col] !== 0) {
					Normalize (col);
					AddRows (addendRow, row, matrix[row][col] / matrix[addendRow][col]);
				}
			}
		}
		
		//====== IfDiagonalCellIsZero =================
		function IfDiagonalCellIsZero (row, col) {
			if (matrix[col][col] == 0) {
				SwitchRows (row, col);
			}
		}
		
		//====== PutZeroRowsAtTop =====================
		function PutZeroRowsAtTop (row, col) {
			while (IsRowZero (col) && usefulRows > 0) { //put all-zero rows on the top
				usefulRows --;
				SwitchRows (col, usefulRows);
			}
		}
		
		//====== IsRowZero ============================
		function IsRowZero (row) {
			var rowIsZero = true;
			for (var col = 0; col < columns; col ++) {
				if (matrix[row][col] !== 0) {
					rowIsZero = false;
				}
			}
			return rowIsZero;
		}
		
		//====== AddRows ==============================
		function AddRows (addend, target, multiplier) {
			for (var col = 0; col < columns; col ++) {
				matrix[target][col] -= multiplier * matrix[addend][col];
			}
			
			Explain ("(row " + target + ") += (row " + addend + ") * (" + -multiplier + "):");
			AddTable (matrix.length, addend, target, currentCol);
		}
		
		//====== Normalize ============================
		function Normalize (row) {
			var multiplier = matrix[row][row];
			if (multiplier != 0 && multiplier != 1) {
				for (var col = 0; col < columns; col ++) {
					matrix[row][col] /= multiplier;
				}
				
				Explain ("Normalizing row " + row + ":");
				AddTable (matrix.length, row, -1, currentCol);
			}
		}
		
		//====== SwitchRows ===========================
		function SwitchRows (row1, row2) {
			var temp = 0;
			for (var col = 0; col < columns; col ++) {
				temp = matrix[row1][col];
				matrix[row1][col] = matrix[row2][col];
				matrix[row2][col] = temp;
			}
			
			Explain ("Switching row " + row1 + " with row " + row2 + ":");
			AddTable (matrix.length, row1, row2, currentCol);
		}
		
		//====== Explain ==============================
		function Explain (Explain) {
			var para = document.createElement ("p");
			myDiv.appendChild (para);
			var text = document.createTextNode (Explain);
			para.appendChild (text);
		}
		
		//====== AddTable =============================
		function AddTable (columns, currentRow1, currentRow2, currentCol) {
			var table = document.createElement ('table');
			var tableBody = document.createElement ('tbody');
			table.appendChild (tableBody);
			
			// columns
			var tr = document.createElement ('tr');
			tableBody.appendChild (tr);
			for (var i = 0; i < columns; i ++) {
				var th = document.createElement ('th');
				th.appendChild (document.createTextNode (i));
				if (i == currentCol) {
					th.style.color = "FF0000";
				}
				tr.appendChild (th);
			}
			
			// rows
			for (var mkRow = 0; mkRow < columns; mkRow ++) {
				var tr = document.createElement ('tr');
				for (var mkCol = 0; mkCol < matrix[mkRow].length; mkCol ++) {
					var td = document.createElement ('td');
					if (mkCol == mkRow) {
						td.style.background = "#E1E1E1";
					}
					td.appendChild (document.createTextNode (matrix[mkRow][mkCol]));
					tr.appendChild (td)
					
					if (currentCol == mkCol && (currentRow1 == mkRow || currentRow2 == mkRow)) {
						td.style.color = "FF0000";
						td.style.fontWeight = "bold";
					}
				}
				
				if (currentRow1 == mkRow || currentRow2 == mkRow) {
					tr.style.background = "#FFFFC2";
				}
				
				tableBody.appendChild (tr);
			}
			
			myDiv.appendChild (table);
		}
		
		//====== AddInputTable ========================
		function AddInputTable (size) {
			var table = document.createElement ('table');
			var tableBody = document.createElement ('tbody');
			table.appendChild (tableBody);
			
			// columns
			var tr = document.createElement ('tr');
			tableBody.appendChild (tr);
			for (var i = 0; i < size; i ++) {
				var th = document.createElement ('th');
				th.appendChild (document.createTextNode (i));
				tr.appendChild (th);
			}
			
			// rows
			for (var mkRow = 0; mkRow < size; mkRow ++) {
				var tr = document.createElement ('tr');
				for (var mkCol = 0; mkCol < size; mkCol ++) {
					var td = document.createElement ('td');
					var input1 = document.createElement("input");
					input1.type = "number";
					input1.className = "matrixInput";
					td.appendChild (input1);
					
					tr.appendChild (td);
				}
				tableBody.appendChild (tr);
			}
			myDiv.appendChild (table);
		}
	</script>
</body>
</html>
